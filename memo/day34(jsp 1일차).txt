day34(jsp 1일차)

웹 서버와 was -> 아파치 톰캣 -> Servlet -> 복습 -> JSP

1. 웹 서버(http Web Server)
	웹 어플리케이션을 실행하기 위한 서버이다
	클라이언트가 보낸 요청이 정적인 컨탠츠를 요구하는지 동적인 컨텐츠를 요구하는지 구분한다
	정적인 컨텐츠를 요청한다면 미리 준비한 웹 문서를 resopnse에 담아 보내주지만 동적 컨텐츠를 처리할 수는 없다
	즉, 정적 페이지를 처리하는 서버이다
	자바에서 사용하는 웹 서버는 대표적으로 Apache가 있다

2. WAS(Web Applicataion Server)
	웹 서버와 동일하게 웹 어플리케이션을 실행하기 위한 서버이며, 웹 컨테이너(서블릿 컨테이너)라고도 불린다
	웹 서버와 다르게 정적, 동적 컨텐츠를 모두 처리할 수 있다
	단, 정적 컨텐츠 처리는 웹 서버에 비해 성능이 떨어진다
	동적 컨텐츠를 처리하기 위해 여러 연선 및 DB 접근을 수행하며 JAVA를 이용한다
	자바에서 사용하는 WAS는 대표적으로 Tomcat이 있다

3. 아파치 톰캣
	WAS로 분류되지만 Apache와 Tomcat을 합쳐 놓은 형태이다
	즉, 일반적인 WAS와 달리 Web Server를 포함하고 있다
	Apache Tomcat의 웹 서버는 정적 요청을 처리하며 동적 요청이 들어왔을 때 웹 컨테이너에게 요청을 전달한다
	그러면 웹 컨테이너는 동적 컨텐츠를 처리하여 웹 서버에게 응답을 보낸다
	웹 서버는 클라이언트에게 응답을 보낼 때 컨테이너에게 받은 결과를 포함시켜 보낸다

	게시판 페이지 어떤 컨텐츠?
	=> 동적
	내 정보 페이지?
	=> 정적
	이용약관 페이지?
	=> 정적
	사용 설명서
	=> 정적

4. 아파치 톰캣 설치 및 세팅
	구글에서 아파치 톰캣 검색 > 최상단 링크 클릭 > 좌측에 다운로드 Tomcat9버전
	> 64bit Window zip 다운로드 > C드라이브에 압축풀기

+) 이클립스 세팅
	1) 웹개발을 하므로 java EE로 사용한다(기본설정)
	2) WINDOWS > preperences > enc 검색 > 인코딩 타입 UTF-8로 확인
		(workspace, css, html, jsp, zml)
	3) preferences > server 검색 > Server and Runtime 클릭
		> 서버 버전 v9.0으로 변경(다운로드 받은 버전) > Axis2로 변경(성능개선)
	4) server 검색 > Runtime Enviroments > add > 9.0 버전 선택 후 next
		> browse 눌러서 c드라이브에 있는 아파치 폴더 선택하기
	5) 하단의 서버탭을 제외한 후 모두 지우고 서버탭에서 No servers ... 클릭
	6) 아파치 > 9.0 서버 클릭 > next > finish
	7) server 탭의 톰켓 서버 더블클릭 하여 포트번호 확익 > 기본 포트는 8080이고 8888로 변경
	8) 서버를 실행시켜서 제대로 켜지는지 확인한다(서버 옆에 started가 떠야한다)

5. 서블릿(Servlet)
	서블릿은 자바에서 제공하는 클래스, 기술이며 동적인 웹페이지를 만들기 위해 사용한다
	Java코드 안에 HTML을 작성하는 형태이며 사용자의 요청 방식에 따라
	doGet(), doPost()등의 메소드가 실행된다
	HttpServlet 클래스를 상속받아 사용한다

=============================================================================================
+) 복습
	1) 기본 용어
	- 서버(Server)
		웹에서 서비스를 제공하는 컴퓨터 시스템

	- 웹 서버(Web Server)
		사용자로부터 HTTP를 통해 요청을 받거나, 웹 컨테이너(서블릿 컨테이너)가 전달해준 결과물을 정적인 페이지로 생성하여 사용자들에게 응답해주는 소프트웨어
		HTML, CSS, Javascript로 구성됨

	- 웹 컨테이너(서블릿 컨테이너) Web Container
		웹 서버가 전송해준 요청을 기초로 동적인 페이지를 생성하여 웹 서버로 돌려줌
		동적인 페이지인 이유는 사용자마다 다른 결과로 응답할 수 있기 떄문이다

	- WAS(Web Application Server)
		웹 어플리케이션이 실행될 수 있는 환경을 제공해주는 소프트웨어
		컴퓨터에서 운영체제(윈도우, 리눅스 등)와 비슷한 역할을 하는 소프트웨어
		WAS는 웹 서버와 웹 컨테이너를 포함한 개념이며, 대표적으로 톰켓이 있다(웹로직, 웹스피어 등의 제품이 있음)

	- 프로토콜(Protocol)
		네트워크를 통해 컴퓨터들이 정보를 주고받는 절차 또는 통신규약을 의미함
		서로 다른 컴퓨터들이 대화하기 위해 필요한 공통 언어 역할을 함
		파일전송(FTP), 이메일 전송(SMTP) 등 ...

	- 포트(Port)
		컴퓨터 사이에서 데이터를 주고받을 수 있는 통로를 의미함
		인터넷에서는 ip 주소를 통해 서버 컴퓨터의 위치를 파악하고 그 컴퓨터가 제공하는 특정 서비스는 포트 번호를 통해 알 수 있다
		HTTP는 80번 포트번호, HTTPS는 443번 포트번호를 사용한다

	2) 주요 특징
		(1) 정적 웹페이지와 동적 웹페이지
			정적 웹 페이지(Static Web Page) : 웹 서버에 저장되어 있는 파일을 그대로 웹 브라우저에 전송해서 출력하는 가장 기본적인 웹 페이지
			동적 웹 페이지(Daynamic Web Page) : 동일한 페이지라고 해도 그 때 그 때 내용이 달라질 수 있는 웹 페이지를 의미한다
				서버가 클라이언트의 요청을 해석하여 가장 적절한 웹 페이지를 그 때 그 때 생성해서 보내주는 기술이다

		(2) 탄생 배경
			동적 웹 페에지 기술로는 분류되지 않지만 웹을 동적으로 만들기 위한 고대의 자바 기술이 자바 에플릿(Java Applet)이 있다
			자바 에플릿은 웹에서 실행되도록 설계된 자바 어플리케이션을 통째로 웹 브라우저로 전송한 후 자바 가상 머신을 탑재한 웹 브라우저가 이를 실행하는 방식으로 구동된다
			동적 웹 기술이 발달하기 전 시절 한 때 이목을 끌었지만 표준 기술인 HTML과 자바스크립트가 발전함에 따라 지금은 더 이상 자원되지 않는 기술이다

			어플리케이션 전체가 클라이언트에 다운로드 된 후 실행되는 자바 에플릿은 속도나 보안성, 유연성 등에서 한계가 있었고 서버 측에서 실행되는 서블릿이 등장하게 되었다
			서블릿은 클라이언트의 요청을 받으면 서버에서 처리한 후, 응답으로는 결과값만 보내주는 구조이다

			웹 브라우저(클라이언트) -- 요청 --> 웹 어플리케이션 서버(웹 서버) -- 요청 --> 서블릿 컨테이너(서블릿) -- 응답 --> 웹 서버 -- 응답 --> 웹 브라우저(클라이언트)

			서블릿은 .java 자바파일을 컴파일한 클래스 파일(.class)형태로 이를 실행하고 관리해주는 런타임을 서블릿을 컨테이너라고 한다
			대표적으로는 아파치 톰캣이 있다

			기본적으로는 자바 코드인데 결과로 보여줄 HTML코드를 일일이 자바로 생성하고 조합하다보니 너무 많은 코드가 필요했고 발상의 전환을 하게 됐다
			기본을 HTML로 하고 필요한 부분만 자바 코드를 삽입하는 형태인 JSP가 탄생하게 되었다

			JSP 파일을 서블릿으로 변환하여 실행하는 방식이다

		(3) 서블릿과 JSP의 차이
			서블릿				JSP
			--------------------------------------------------------------------
			자바코드 안에서 전체			HTML 코드 안에서 필요한 부분만 
			HTML 페이지를 생성			자바 코드를 스크립트 형태로 추가함
			
			변수 선언 및 초기화가		자주 쓰이는 기능을 내장 객체로 제공하여
			반드시 선행되어야 함			즉시 사용 가능함

			컨트롤러(controller)를		처리된 결과를 보여주는 뷰(View)를 
			만들 때 사용함			만들 때 사용함

=============================================================================================
6. JSP(Java Server Page)
	JAVA를 기반으로 만든 웹 프로그래밍 기술이다
	서블릿의 불편함을 개선하고자 HTML에 JAVA 코드를 작성할 수 있게 만들었으며, 동적인 페이지를 만드는 데 특화되어있다
	JSP도 서블릿 클래스처럼 웹 컨테이너(서블릿 컨테이너)가 관리하며 웹 컨테이너가 JSP를 실행시킬 때 서블릿으로 변환하여 실행한다
	즉, JSP는 내부적으로 서블릿으로 변환되어 실행된다

7. web.xml 파일
	서블릿 파일에 작성된 @WebServlet() 어노테이션에 해당 서블릿의 경로를 작성한다
	예전에는 web.xml 파일을 이용해서 URL 매핑 처리를 진행했다
	@WebServlet() 어노테이션이 대신 이 서블릿의 경로를 알려줄 수 있도록 작성하는 파일이다
	우리가 만든 서블릿 파일을 등록하고 특정 경로로 요청이 들어오면 우리가 등록한 서블릿과 연결되도록 매핑해줘야 한다

	1) 서블릿과 url 파일
		<servlet> 태그 : 우리가 만든 서블릿을 등록할 수 있다
			<servlet-name> : 서블릿에 이름을 지어주는 태그
			<servlet-class> : 패키지 경로를 포함한 서블릿 클래스의 이름을 작성하는 태그


		<servlet-mapping> : 우리가 만든 서블릿과 특정 URL 경로를 매핑시킬 수 있다
			<servlet-name> : 매핑시킬 서블릿의 이름을 작성하는데 서블릿 등록 시 작성한 이름으로 지정한다
			<url-pattern> : 어떤 URL 경로와 매핑시킬지 작성한다

	2) web.xml 파일 사용할 때의 요청(request) 흐름
		- 클라이언트가 요청(request)를 보낸다
		- 웹 서버가 사용자가 request를 보낸 URL을 검사하여 어떤 서블릿이 request를 처리해야 하는지 결정한다
		- 만약 request가 정적 페이지를 원한다면 웹 서버는 자체적으로 처리하여 응답(response)을 클라이언트에게 보내준다
		- 만약 request가 동적 페이지를 원한다면 웹 서버는 서블릿 컨테이너의 도움을 받는다
		- 서블릿 컨테이너는 web.xml 파일에서 URL에 해당하는 서블릿을 찾아서 실행한다
		- 서블릿은 request를 처리하여 서블릿 컨테이너에 전달하고 서블릿 컨테이너는 휍 서버로 전달한다
		- 최종적으로 웹 서버는 클라이언트에게 response를 보낸다	